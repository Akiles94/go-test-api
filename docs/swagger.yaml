basePath: /api/v1
definitions:
  dto.CreateProductRequest:
    properties:
      category:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      sku:
        type: string
    required:
    - category
    - name
    - price
    - sku
    type: object
  dto.PatchProductRequest:
    properties:
      category:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
    type: object
  dto.ProductResponse:
    properties:
      category:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
    type: object
  shared_dto.ErrorResponse:
    properties:
      details:
        additionalProperties: true
        type: object
      error:
        type: string
      message:
        type: string
    type: object
  shared_dto.PaginatedResult-dto_ProductResponse:
    properties:
      items:
        items:
          $ref: '#/definitions/dto.ProductResponse'
        type: array
      next_cursor:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A test API for products management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Test API
  version: "1.0"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional cursor and limit
      parameters:
      - description: Cursor for pagination (UUID)
        in: query
        name: cursor
        type: string
      - description: Limit of products per page (1-100)
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shared_dto.PaginatedResult-dto_ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Get paginated products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product with the provided details
      parameters:
      - description: Product creation details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a single product by its ID
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProductResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Get product by ID
      tags:
      - products
    patch:
      consumes:
      - application/json
      description: Update specific fields of a product by ID
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Product patch details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.PatchProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Partially update a product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update all fields of a product by ID
      parameters:
      - description: Product ID (UUID)
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Product update details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/shared_dto.ErrorResponse'
      summary: Update a product
      tags:
      - products
schemes:
- http
- https
swagger: "2.0"
