// gateway/proto/registry/service_registry.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: registry/service_registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceRegistry_RegisterService_FullMethodName   = "/gateway.registry.ServiceRegistry/RegisterService"
	ServiceRegistry_DeregisterService_FullMethodName = "/gateway.registry.ServiceRegistry/DeregisterService"
	ServiceRegistry_GetServices_FullMethodName       = "/gateway.registry.ServiceRegistry/GetServices"
	ServiceRegistry_WatchServices_FullMethodName     = "/gateway.registry.ServiceRegistry/WatchServices"
)

// ServiceRegistryClient is the client API for ServiceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ═══════════════════════════════════════════════════════════
// 🎯 SERVICE - Only service registry functions
// ═══════════════════════════════════════════════════════════
type ServiceRegistryClient interface {
	RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error)
	DeregisterService(ctx context.Context, in *DeregisterServiceRequest, opts ...grpc.CallOption) (*DeregisterServiceResponse, error)
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	WatchServices(ctx context.Context, in *WatchServicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServiceUpdate], error)
}

type serviceRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceRegistryClient(cc grpc.ClientConnInterface) ServiceRegistryClient {
	return &serviceRegistryClient{cc}
}

func (c *serviceRegistryClient) RegisterService(ctx context.Context, in *RegisterServiceRequest, opts ...grpc.CallOption) (*RegisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterServiceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistry_RegisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) DeregisterService(ctx context.Context, in *DeregisterServiceRequest, opts ...grpc.CallOption) (*DeregisterServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeregisterServiceResponse)
	err := c.cc.Invoke(ctx, ServiceRegistry_DeregisterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, ServiceRegistry_GetServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceRegistryClient) WatchServices(ctx context.Context, in *WatchServicesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ServiceUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ServiceRegistry_ServiceDesc.Streams[0], ServiceRegistry_WatchServices_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchServicesRequest, ServiceUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceRegistry_WatchServicesClient = grpc.ServerStreamingClient[ServiceUpdate]

// ServiceRegistryServer is the server API for ServiceRegistry service.
// All implementations must embed UnimplementedServiceRegistryServer
// for forward compatibility.
//
// ═══════════════════════════════════════════════════════════
// 🎯 SERVICE - Only service registry functions
// ═══════════════════════════════════════════════════════════
type ServiceRegistryServer interface {
	RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error)
	DeregisterService(context.Context, *DeregisterServiceRequest) (*DeregisterServiceResponse, error)
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	WatchServices(*WatchServicesRequest, grpc.ServerStreamingServer[ServiceUpdate]) error
	mustEmbedUnimplementedServiceRegistryServer()
}

// UnimplementedServiceRegistryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceRegistryServer struct{}

func (UnimplementedServiceRegistryServer) RegisterService(context.Context, *RegisterServiceRequest) (*RegisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedServiceRegistryServer) DeregisterService(context.Context, *DeregisterServiceRequest) (*DeregisterServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterService not implemented")
}
func (UnimplementedServiceRegistryServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedServiceRegistryServer) WatchServices(*WatchServicesRequest, grpc.ServerStreamingServer[ServiceUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method WatchServices not implemented")
}
func (UnimplementedServiceRegistryServer) mustEmbedUnimplementedServiceRegistryServer() {}
func (UnimplementedServiceRegistryServer) testEmbeddedByValue()                         {}

// UnsafeServiceRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceRegistryServer will
// result in compilation errors.
type UnsafeServiceRegistryServer interface {
	mustEmbedUnimplementedServiceRegistryServer()
}

func RegisterServiceRegistryServer(s grpc.ServiceRegistrar, srv ServiceRegistryServer) {
	// If the following call pancis, it indicates UnimplementedServiceRegistryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceRegistry_ServiceDesc, srv)
}

func _ServiceRegistry_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistry_RegisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).RegisterService(ctx, req.(*RegisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_DeregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).DeregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistry_DeregisterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).DeregisterService(ctx, req.(*DeregisterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceRegistry_GetServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceRegistry_WatchServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceRegistryServer).WatchServices(m, &grpc.GenericServerStream[WatchServicesRequest, ServiceUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ServiceRegistry_WatchServicesServer = grpc.ServerStreamingServer[ServiceUpdate]

// ServiceRegistry_ServiceDesc is the grpc.ServiceDesc for ServiceRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.registry.ServiceRegistry",
	HandlerType: (*ServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _ServiceRegistry_RegisterService_Handler,
		},
		{
			MethodName: "DeregisterService",
			Handler:    _ServiceRegistry_DeregisterService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _ServiceRegistry_GetServices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchServices",
			Handler:       _ServiceRegistry_WatchServices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry/service_registry.proto",
}
